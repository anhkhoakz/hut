// Code generated by gqlclientgen - DO NOT EDIT

package metasrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessScope string

const (
	AccessScopeAuditLog AccessScope = "AUDIT_LOG"
	AccessScopeBilling  AccessScope = "BILLING"
	AccessScopePgpKeys  AccessScope = "PGP_KEYS"
	AccessScopeSshKeys  AccessScope = "SSH_KEYS"
	AccessScopeProfile  AccessScope = "PROFILE"
)

type AuditLogCursor struct {
	Results []AuditLogEntry `json:"results"`
	Cursor  *Cursor         `json:"cursor,omitempty"`
}

type AuditLogEntry struct {
	Id        int32     `json:"id"`
	Created   time.Time `json:"created"`
	IpAddress string    `json:"ipAddress"`
	EventType string    `json:"eventType"`
	Details   *string   `json:"details,omitempty"`
}

type Cursor string

type Entity struct {
	Id            int32     `json:"id"`
	Created       time.Time `json:"created"`
	Updated       time.Time `json:"updated"`
	CanonicalName string    `json:"canonicalName"`
}

type Invoice struct {
	Id        int32     `json:"id"`
	Created   time.Time `json:"created"`
	Cents     int32     `json:"cents"`
	ValidThru time.Time `json:"validThru"`
	Source    *string   `json:"source,omitempty"`
}

type InvoiceCursor struct {
	Results []Invoice `json:"results"`
	Cursor  *Cursor   `json:"cursor,omitempty"`
}

type OAuthClient struct {
	Id          int32   `json:"id"`
	Uuid        string  `json:"uuid"`
	RedirectUrl string  `json:"redirectUrl"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Url         *string `json:"url,omitempty"`
	Owner       Entity  `json:"owner"`
}

type OAuthClientRegistration struct {
	Client OAuthClient `json:"client"`
	Secret string      `json:"secret"`
}

type OAuthGrant struct {
	Id        int32       `json:"id"`
	Client    OAuthClient `json:"client"`
	Issued    time.Time   `json:"issued"`
	Expires   time.Time   `json:"expires"`
	TokenHash string      `json:"tokenHash"`
}

type OAuthGrantRegistration struct {
	Grant  OAuthGrant `json:"grant"`
	Grants string     `json:"grants"`
	Secret string     `json:"secret"`
}

type OAuthPersonalToken struct {
	Id      int32     `json:"id"`
	Issued  time.Time `json:"issued"`
	Expires time.Time `json:"expires"`
	Comment *string   `json:"comment,omitempty"`
}

type OAuthPersonalTokenRegistration struct {
	Token  OAuthPersonalToken `json:"token"`
	Secret string             `json:"secret"`
}

type PGPKey struct {
	Id          int32     `json:"id"`
	Created     time.Time `json:"created"`
	User        User      `json:"user"`
	Key         string    `json:"key"`
	Fingerprint string    `json:"fingerprint"`
}

type PGPKeyCursor struct {
	Results []PGPKey `json:"results"`
	Cursor  *Cursor  `json:"cursor,omitempty"`
}

type PGPKeyEvent struct {
	Uuid  string       `json:"uuid"`
	Event WebhookEvent `json:"event"`
	Date  time.Time    `json:"date"`
	Key   PGPKey       `json:"key"`
}

type ProfileUpdateEvent struct {
	Uuid    string       `json:"uuid"`
	Event   WebhookEvent `json:"event"`
	Date    time.Time    `json:"date"`
	Profile User         `json:"profile"`
}

type ProfileWebhookInput struct {
	Url    string         `json:"url"`
	Events []WebhookEvent `json:"events"`
	Query  string         `json:"query"`
}

type ProfileWebhookSubscription struct {
	Id         int32                 `json:"id"`
	Events     []WebhookEvent        `json:"events"`
	Query      string                `json:"query"`
	Url        string                `json:"url"`
	Client     *OAuthClient          `json:"client,omitempty"`
	Deliveries WebhookDeliveryCursor `json:"deliveries"`
	Sample     string                `json:"sample"`
}

type SSHKey struct {
	Id          int32     `json:"id"`
	Created     time.Time `json:"created"`
	LastUsed    time.Time `json:"lastUsed,omitempty"`
	User        User      `json:"user"`
	Key         string    `json:"key"`
	Fingerprint string    `json:"fingerprint"`
	Comment     *string   `json:"comment,omitempty"`
}

type SSHKeyCursor struct {
	Results []SSHKey `json:"results"`
	Cursor  *Cursor  `json:"cursor,omitempty"`
}

type SSHKeyEvent struct {
	Uuid  string       `json:"uuid"`
	Event WebhookEvent `json:"event"`
	Date  time.Time    `json:"date"`
	Key   SSHKey       `json:"key"`
}

type User struct {
	Id               int32        `json:"id"`
	Created          time.Time    `json:"created"`
	Updated          time.Time    `json:"updated"`
	CanonicalName    string       `json:"canonicalName"`
	Username         string       `json:"username"`
	Email            string       `json:"email"`
	Url              *string      `json:"url,omitempty"`
	Location         *string      `json:"location,omitempty"`
	Bio              *string      `json:"bio,omitempty"`
	UserType         UserType     `json:"userType"`
	SuspensionNotice *string      `json:"suspensionNotice,omitempty"`
	SshKeys          SSHKeyCursor `json:"sshKeys"`
	PgpKeys          PGPKeyCursor `json:"pgpKeys"`
}

type UserInput struct {
	Url      *string `json:"url,omitempty"`
	Location *string `json:"location,omitempty"`
	Bio      *string `json:"bio,omitempty"`
	Email    *string `json:"email,omitempty"`
}

type UserType string

const (
	UserTypeUnconfirmed      UserType = "UNCONFIRMED"
	UserTypeActiveNonPaying  UserType = "ACTIVE_NON_PAYING"
	UserTypeActiveFree       UserType = "ACTIVE_FREE"
	UserTypeActivePaying     UserType = "ACTIVE_PAYING"
	UserTypeActiveDelinquent UserType = "ACTIVE_DELINQUENT"
	UserTypeAdmin            UserType = "ADMIN"
	UserTypeSuspended        UserType = "SUSPENDED"
)

type Version struct {
	Major           int32     `json:"major"`
	Minor           int32     `json:"minor"`
	Patch           int32     `json:"patch"`
	DeprecationDate time.Time `json:"deprecationDate,omitempty"`
}

type WebhookDelivery struct {
	Uuid            string              `json:"uuid"`
	Date            time.Time           `json:"date"`
	Event           WebhookEvent        `json:"event"`
	Subscription    WebhookSubscription `json:"subscription"`
	RequestBody     string              `json:"requestBody"`
	ResponseBody    *string             `json:"responseBody,omitempty"`
	ResponseHeaders *string             `json:"responseHeaders,omitempty"`
	ResponseStatus  *int32              `json:"responseStatus,omitempty"`
}

type WebhookDeliveryCursor struct {
	Results []WebhookDelivery `json:"results"`
	Cursor  *Cursor           `json:"cursor,omitempty"`
}

type WebhookEvent string

const (
	WebhookEventProfileUpdate WebhookEvent = "PROFILE_UPDATE"
	WebhookEventPgpKeyAdded   WebhookEvent = "PGP_KEY_ADDED"
	WebhookEventPgpKeyRemoved WebhookEvent = "PGP_KEY_REMOVED"
	WebhookEventSshKeyAdded   WebhookEvent = "SSH_KEY_ADDED"
	WebhookEventSshKeyRemoved WebhookEvent = "SSH_KEY_REMOVED"
)

type WebhookPayload struct {
	Uuid  string       `json:"uuid"`
	Event WebhookEvent `json:"event"`
	Date  time.Time    `json:"date"`
}

type WebhookSubscription struct {
	Id         int32                 `json:"id"`
	Events     []WebhookEvent        `json:"events"`
	Query      string                `json:"query"`
	Url        string                `json:"url"`
	Client     *OAuthClient          `json:"client,omitempty"`
	Deliveries WebhookDeliveryCursor `json:"deliveries"`
	Sample     string                `json:"sample"`
}

type WebhookSubscriptionCursor struct {
	Results []WebhookSubscription `json:"results"`
	Cursor  *Cursor               `json:"cursor,omitempty"`
}

func FetchUser(client *gqlclient.Client, ctx context.Context, username string) (userByName *User, err error) {
	op := gqlclient.NewOperation("query fetchUser ($username: String!) {\n\tuserByName(username: $username) {\n\t\tcanonicalName\n\t\temail\n\t\turl\n\t\tlocation\n\t\tbio\n\t}\n}\n")
	op.Var("username", username)
	var respData struct {
		UserByName *User
	}
	err = client.Execute(ctx, op, &respData)
	return respData.UserByName, err
}

func CreateSSHKey(client *gqlclient.Client, ctx context.Context, key string) (createSSHKey SSHKey, err error) {
	op := gqlclient.NewOperation("mutation createSSHKey ($key: String!) {\n\tcreateSSHKey(key: $key) {\n\t\tfingerprint\n\t\tcomment\n\t}\n}\n")
	op.Var("key", key)
	var respData struct {
		CreateSSHKey SSHKey
	}
	err = client.Execute(ctx, op, &respData)
	return respData.CreateSSHKey, err
}
