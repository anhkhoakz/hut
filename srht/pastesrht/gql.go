// Code generated by gqlclientgen - DO NOT EDIT

package pastesrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessScope string

const (
	AccessScopeProfile AccessScope = "PROFILE"
	AccessScopePastes  AccessScope = "PASTES"
)

type Cursor string

type Entity struct {
	Id            int32        `json:"id"`
	Created       time.Time    `json:"created"`
	CanonicalName string       `json:"canonicalName"`
	Pastes        *PasteCursor `json:"pastes"`
}

type File struct {
	Filename *string `json:"filename,omitempty"`
	Hash     string  `json:"hash"`
	Contents URL     `json:"contents"`
}

type Paste struct {
	Id         string     `json:"id"`
	Created    time.Time  `json:"created"`
	Visibility Visibility `json:"visibility"`
	Files      []*File    `json:"files"`
	User       *Entity    `json:"user"`
}

type PasteCursor struct {
	Results []Paste `json:"results"`
	Cursor  *Cursor `json:"cursor,omitempty"`
}

type URL string

type User struct {
	Id            int32        `json:"id"`
	Created       time.Time    `json:"created"`
	CanonicalName string       `json:"canonicalName"`
	Pastes        *PasteCursor `json:"pastes"`
	Username      string       `json:"username"`
}

type Version struct {
	Major           int32     `json:"major"`
	Minor           int32     `json:"minor"`
	Patch           int32     `json:"patch"`
	DeprecationDate time.Time `json:"deprecationDate,omitempty"`
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

func CreatePaste(client *gqlclient.Client, ctx context.Context, files []gqlclient.Upload, visibility Visibility) (create *Paste, err error) {
	op := gqlclient.NewOperation("mutation createPaste ($files: [Upload!]!, $visibility: Visibility!) {\n\tcreate(files: $files, visibility: $visibility) {\n\t\tid\n\t\tuser {\n\t\t\tcanonicalName\n\t\t}\n\t}\n}\n")
	op.Var("files", files)
	op.Var("visibility", visibility)
	var respData struct {
		Create *Paste
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Create, err
}

func Delete(client *gqlclient.Client, ctx context.Context, id string) (delete *Paste, err error) {
	op := gqlclient.NewOperation("mutation delete ($id: String!) {\n\tdelete(id: $id) {\n\t\tid\n\t}\n}\n")
	op.Var("id", id)
	var respData struct {
		Delete *Paste
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Delete, err
}

func Update(client *gqlclient.Client, ctx context.Context, id string, visibility Visibility) (update *Paste, err error) {
	op := gqlclient.NewOperation("mutation update ($id: String!, $visibility: Visibility!) {\n\tupdate(id: $id, visibility: $visibility) {\n\t\tid\n\t}\n}\n")
	op.Var("id", id)
	op.Var("visibility", visibility)
	var respData struct {
		Update *Paste
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Update, err
}

func Pastes(client *gqlclient.Client, ctx context.Context) (pastes *PasteCursor, err error) {
	op := gqlclient.NewOperation("query pastes {\n\tpastes {\n\t\tresults {\n\t\t\tid\n\t\t\tcreated\n\t\t\tvisibility\n\t\t\tfiles {\n\t\t\t\tfilename\n\t\t\t}\n\t\t}\n\t}\n}\n")
	var respData struct {
		Pastes *PasteCursor
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Pastes, err
}

func PasteCompletionList(client *gqlclient.Client, ctx context.Context) (pastes *PasteCursor, err error) {
	op := gqlclient.NewOperation("query pasteCompletionList {\n\tpastes {\n\t\tresults {\n\t\t\tid\n\t\t\tfiles {\n\t\t\t\tfilename\n\t\t\t}\n\t\t}\n\t}\n}\n")
	var respData struct {
		Pastes *PasteCursor
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Pastes, err
}
