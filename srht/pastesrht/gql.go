// Code generated by gqlclientgen - DO NOT EDIT

package pastesrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessScope string

const (
	AccessScopeProfile AccessScope = "PROFILE"
	AccessScopePastes  AccessScope = "PASTES"
)

type Cursor string

type Entity struct {
	Id            int32
	Created       time.Time
	CanonicalName string
	Pastes        PasteCursor
}

type File struct {
	Filename *string
	Hash     string
	Contents URL
}

type Paste struct {
	Id         string
	Created    time.Time
	Visibility Visibility
	Files      []*File
	User       Entity
}

type PasteCursor struct {
	Results []Paste
	Cursor  *Cursor
}

type URL string

type User struct {
	Id            int32
	Created       time.Time
	CanonicalName string
	Pastes        PasteCursor
	Username      string
}

type Version struct {
	Major           int32
	Minor           int32
	Patch           int32
	DeprecationDate time.Time
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

func CreatePaste(client *gqlclient.Client, ctx context.Context, files []gqlclient.Upload) (create Paste, err error) {
	op := gqlclient.NewOperation("mutation createPaste ($files: [Upload!]!) {\n\tcreate(files: $files, visibility: UNLISTED) {\n\t\tid\n\t\tuser {\n\t\t\tcanonicalName\n\t\t}\n\t}\n}\n")
	op.Var("files", files)
	var respData struct {
		Create Paste
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Create, err
}
