// Code generated by gqlclientgen - DO NOT EDIT

package buildssrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessScope string

const (
	AccessScopeProfile AccessScope = "PROFILE"
	AccessScopeJobs    AccessScope = "JOBS"
	AccessScopeLogs    AccessScope = "LOGS"
	AccessScopeSecrets AccessScope = "SECRETS"
)

type Artifact struct {
	Id      int32     `json:"id"`
	Created time.Time `json:"created"`
	Path    string    `json:"path"`
	Size    int32     `json:"size"`
	Url     *string   `json:"url,omitempty"`
}

type Binary string

type Cursor string

type EmailTrigger struct {
	Condition TriggerCondition `json:"condition"`
	To        string           `json:"to"`
	Cc        *string          `json:"cc,omitempty"`
	InReplyTo *string          `json:"inReplyTo,omitempty"`
}

type EmailTriggerInput struct {
	To        string  `json:"to"`
	Cc        *string `json:"cc,omitempty"`
	InReplyTo *string `json:"inReplyTo,omitempty"`
}

type Entity struct {
	Id            int32     `json:"id"`
	Created       time.Time `json:"created"`
	Updated       time.Time `json:"updated"`
	CanonicalName string    `json:"canonicalName"`
}

type File string

type Job struct {
	Id        int32       `json:"id"`
	Created   time.Time   `json:"created"`
	Updated   time.Time   `json:"updated"`
	Status    JobStatus   `json:"status"`
	Manifest  string      `json:"manifest"`
	Note      *string     `json:"note,omitempty"`
	Tags      []*string   `json:"tags"`
	Image     string      `json:"image"`
	Runner    *string     `json:"runner,omitempty"`
	Owner     Entity      `json:"owner"`
	Group     *JobGroup   `json:"group,omitempty"`
	Tasks     []*Task     `json:"tasks"`
	Artifacts []*Artifact `json:"artifacts"`
	Log       *Log        `json:"log,omitempty"`
	Secrets   []*Secret   `json:"secrets,omitempty"`
}

type JobCursor struct {
	Results []Job   `json:"results"`
	Cursor  *Cursor `json:"cursor,omitempty"`
}

type JobGroup struct {
	Id       int32      `json:"id"`
	Created  time.Time  `json:"created"`
	Note     *string    `json:"note,omitempty"`
	Owner    Entity     `json:"owner"`
	Jobs     []*Job     `json:"jobs"`
	Triggers []*Trigger `json:"triggers"`
}

type JobStatus string

const (
	JobStatusPending   JobStatus = "PENDING"
	JobStatusQueued    JobStatus = "QUEUED"
	JobStatusRunning   JobStatus = "RUNNING"
	JobStatusSuccess   JobStatus = "SUCCESS"
	JobStatusFailed    JobStatus = "FAILED"
	JobStatusTimeout   JobStatus = "TIMEOUT"
	JobStatusCancelled JobStatus = "CANCELLED"
)

type Log struct {
	Last128KiB string `json:"last128KiB"`
	FullURL    string `json:"fullURL"`
}

type PGPKey struct {
	Id         int32     `json:"id"`
	Created    time.Time `json:"created"`
	Uuid       string    `json:"uuid"`
	Name       *string   `json:"name,omitempty"`
	PrivateKey Binary    `json:"privateKey"`
}

type SSHKey struct {
	Id         int32     `json:"id"`
	Created    time.Time `json:"created"`
	Uuid       string    `json:"uuid"`
	Name       *string   `json:"name,omitempty"`
	PrivateKey Binary    `json:"privateKey"`
}

type Secret struct {
	Id      int32     `json:"id"`
	Created time.Time `json:"created"`
	Uuid    string    `json:"uuid"`
	Name    *string   `json:"name,omitempty"`
}

type SecretCursor struct {
	Results []Secret `json:"results"`
	Cursor  *Cursor  `json:"cursor,omitempty"`
}

type SecretFile struct {
	Id      int32     `json:"id"`
	Created time.Time `json:"created"`
	Uuid    string    `json:"uuid"`
	Name    *string   `json:"name,omitempty"`
	Path    string    `json:"path"`
	Mode    int32     `json:"mode"`
	Data    Binary    `json:"data"`
}

type Task struct {
	Id      int32      `json:"id"`
	Created time.Time  `json:"created"`
	Updated time.Time  `json:"updated"`
	Name    string     `json:"name"`
	Status  TaskStatus `json:"status"`
	Log     *Log       `json:"log,omitempty"`
	Job     Job        `json:"job"`
}

type TaskStatus string

const (
	TaskStatusPending TaskStatus = "PENDING"
	TaskStatusRunning TaskStatus = "RUNNING"
	TaskStatusSuccess TaskStatus = "SUCCESS"
	TaskStatusFailed  TaskStatus = "FAILED"
	TaskStatusSkipped TaskStatus = "SKIPPED"
)

type Trigger struct {
	Condition TriggerCondition `json:"condition"`
}

type TriggerCondition string

const (
	TriggerConditionSuccess TriggerCondition = "SUCCESS"
	TriggerConditionFailure TriggerCondition = "FAILURE"
	TriggerConditionAlways  TriggerCondition = "ALWAYS"
)

type TriggerInput struct {
	Type      TriggerType          `json:"type"`
	Condition TriggerCondition     `json:"condition"`
	Email     *EmailTriggerInput   `json:"email,omitempty"`
	Webhook   *WebhookTriggerInput `json:"webhook,omitempty"`
}

type TriggerType string

const (
	TriggerTypeEmail   TriggerType = "EMAIL"
	TriggerTypeWebhook TriggerType = "WEBHOOK"
)

type User struct {
	Id            int32     `json:"id"`
	Created       time.Time `json:"created"`
	Updated       time.Time `json:"updated"`
	CanonicalName string    `json:"canonicalName"`
	Username      string    `json:"username"`
	Email         string    `json:"email"`
	Url           *string   `json:"url,omitempty"`
	Location      *string   `json:"location,omitempty"`
	Bio           *string   `json:"bio,omitempty"`
	Jobs          JobCursor `json:"jobs"`
}

type Version struct {
	Major           int32     `json:"major"`
	Minor           int32     `json:"minor"`
	Patch           int32     `json:"patch"`
	DeprecationDate time.Time `json:"deprecationDate,omitempty"`
}

type WebhookTrigger struct {
	Condition TriggerCondition `json:"condition"`
	Url       string           `json:"url"`
}

type WebhookTriggerInput struct {
	Url string `json:"url"`
}

func Submit(client *gqlclient.Client, ctx context.Context, manifest string) (submit Job, err error) {
	op := gqlclient.NewOperation("mutation submit ($manifest: String!) {\n\tsubmit(manifest: $manifest) {\n\t\tid\n\t\towner {\n\t\t\tcanonicalName\n\t\t}\n\t}\n}\n")
	op.Var("manifest", manifest)
	var respData struct {
		Submit Job
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Submit, err
}

func Monitor(client *gqlclient.Client, ctx context.Context, id int32) (job *Job, err error) {
	op := gqlclient.NewOperation("query monitor ($id: Int!) {\n\tjob(id: $id) {\n\t\tstatus\n\t\tlog {\n\t\t\tfullURL\n\t\t}\n\t\ttasks {\n\t\t\tname\n\t\t\tstatus\n\t\t\tlog {\n\t\t\t\tfullURL\n\t\t\t}\n\t\t}\n\t}\n}\n")
	op.Var("id", id)
	var respData struct {
		Job *Job
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Job, err
}
