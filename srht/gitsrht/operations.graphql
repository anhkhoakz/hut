query repositoryIDByName($name: String!) {
    repositoryByName(name: $name) {
        id
    }
}

query listArtifacts($name: String!) {
    repositoryByName(name: $name) {
        ...artifacts
    }
}

query listArtifactsByOwner($owner: String!, $repo: String!) {
    repositoryByOwner(owner: $owner, repo: $repo) {
        ...artifacts
    }
}

fragment artifacts on Repository {
    references {
        results {
            name
            artifacts {
                results {
                    id
                    filename
                }
            }
        }
    }
}

query repositoryByName($name: String!) {
    repositoryByName(name: $name) {
        ...repository
    }
}

query repositoryByOwner($owner: String!, $repo: String!) {
    repositoryByOwner(owner: $owner, repo: $repo) {
        ...repository
    }
}

fragment repository on Repository {
    name
    description
    visibility
    upstreamUrl
    references {
        results {
            name
        }
    }
    log {
        results {
            shortId
            author {
                name
                email
                time
            }
            message
        }
    }
}

query repositories {
    repositories {
        ...repos
    }
}

query repositoriesByUser($username: String!) {
    user(username: $username) {
        repositories {
            ...repos
        }
    }
}

fragment repos on RepositoryCursor {
    results {
        name
        description
        visibility
    }
}

query sshSettings {
    version {
        settings {
            sshUser
        }
    }
}

query repoNames {
    repositories {
        results {
            name
        }
    }
}

query revsByRepoName($name: String!) {
    repositoryByName(name: $name) {
        references {
            results {
                name
            }
        }
    }
}

query aclByRepoName($name: String!) {
    repositoryByName(name: $name) {
        accessControlList {
            results {
                id
                created
                entity {
                    canonicalName
                }
                mode
            }
        }
    }
}

mutation uploadArtifact($repoId: Int!, $revspec: String!, $file: Upload!) {
    uploadArtifact(repoId: $repoId, revspec: $revspec, file: $file) {
        filename
    }
}

mutation deleteArtifact($id: Int!) {
    deleteArtifact(id: $id) {
        filename
    }
}

mutation createRepository(
    $name: String!
    $visibility: Visibility!
    $description: String!
) {
    createRepository(
        name: $name
        visibility: $visibility
        description: $description
    ) {
        owner {
            canonicalName
        }
        name
    }
}

mutation deleteRepository($id: Int!) {
    deleteRepository(id: $id) {
        name
    }
}

mutation updateACL($repoId: Int!, $mode: AccessMode!, $entity: ID!) {
    updateACL(repoId: $repoId, mode: $mode, entity: $entity) {
        entity {
            canonicalName
        }
    }
}

mutation deleteACL($id: Int!) {
    deleteACL(id: $id) {
        entity {
            canonicalName
        }
        repository {
            name
        }
    }
}
