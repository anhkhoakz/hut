// Code generated by gqlclientgen - DO NOT EDIT

package gitsrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type ACL struct {
	Id         int32       `json:"id"`
	Created    time.Time   `json:"created"`
	Repository Repository  `json:"repository"`
	Entity     Entity      `json:"entity"`
	Mode       *AccessMode `json:"mode,omitempty"`
}

type ACLCursor struct {
	Results []ACL   `json:"results"`
	Cursor  *Cursor `json:"cursor,omitempty"`
}

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessMode string

const (
	AccessModeRo AccessMode = "RO"
	AccessModeRw AccessMode = "RW"
)

type AccessScope string

const (
	AccessScopeProfile      AccessScope = "PROFILE"
	AccessScopeRepositories AccessScope = "REPOSITORIES"
	AccessScopeObjects      AccessScope = "OBJECTS"
	AccessScopeAcls         AccessScope = "ACLS"
)

type Artifact struct {
	Id       int32     `json:"id"`
	Created  time.Time `json:"created"`
	Filename string    `json:"filename"`
	Checksum string    `json:"checksum"`
	Size     int32     `json:"size"`
	Url      string    `json:"url"`
}

type ArtifactCursor struct {
	Results []Artifact `json:"results"`
	Cursor  *Cursor    `json:"cursor,omitempty"`
}

type BinaryBlob struct {
	Type    ObjectType `json:"type"`
	Id      string     `json:"id"`
	ShortId string     `json:"shortId"`
	Raw     string     `json:"raw"`
	Base64  string     `json:"base64"`
}

type Blob struct {
	Id string `json:"id"`
}

type Commit struct {
	Type      ObjectType `json:"type"`
	Id        string     `json:"id"`
	ShortId   string     `json:"shortId"`
	Raw       string     `json:"raw"`
	Author    Signature  `json:"author"`
	Committer Signature  `json:"committer"`
	Message   string     `json:"message"`
	Tree      Tree       `json:"tree"`
	Parents   []Commit   `json:"parents"`
	Diff      string     `json:"diff"`
}

type CommitCursor struct {
	Results []Commit `json:"results"`
	Cursor  *Cursor  `json:"cursor,omitempty"`
}

type Cursor string

type Entity struct {
	Id            int32            `json:"id"`
	Created       time.Time        `json:"created"`
	Updated       time.Time        `json:"updated"`
	CanonicalName string           `json:"canonicalName"`
	Repositories  RepositoryCursor `json:"repositories"`
}

type Features struct {
	Artifacts bool `json:"artifacts"`
}

type Filter struct {
	Count  *int32  `json:"count,omitempty"`
	Search *string `json:"search,omitempty"`
}

type Object struct {
	Type    ObjectType `json:"type"`
	Id      string     `json:"id"`
	ShortId string     `json:"shortId"`
	Raw     string     `json:"raw"`
}

type ObjectType string

const (
	ObjectTypeCommit ObjectType = "COMMIT"
	ObjectTypeTree   ObjectType = "TREE"
	ObjectTypeBlob   ObjectType = "BLOB"
	ObjectTypeTag    ObjectType = "TAG"
)

type Reference struct {
	Name      string         `json:"name"`
	Target    string         `json:"target"`
	Follow    *Object        `json:"follow,omitempty"`
	Artifacts ArtifactCursor `json:"artifacts"`
}

type ReferenceCursor struct {
	Results []Reference `json:"results"`
	Cursor  *Cursor     `json:"cursor,omitempty"`
}

type RepoInput struct {
	Name        *string     `json:"name,omitempty"`
	Description *string     `json:"description,omitempty"`
	Visibility  *Visibility `json:"visibility,omitempty"`
	Readme      *string     `json:"readme,omitempty"`
}

type Repository struct {
	Id                int32           `json:"id"`
	Created           time.Time       `json:"created"`
	Updated           time.Time       `json:"updated"`
	Owner             Entity          `json:"owner"`
	Name              string          `json:"name"`
	Description       *string         `json:"description,omitempty"`
	Visibility        Visibility      `json:"visibility"`
	Readme            *string         `json:"readme,omitempty"`
	UpstreamUrl       *string         `json:"upstreamUrl,omitempty"`
	AccessControlList ACLCursor       `json:"accessControlList"`
	Objects           []*Object       `json:"objects"`
	References        ReferenceCursor `json:"references"`
	HEAD              *Reference      `json:"HEAD,omitempty"`
	Log               CommitCursor    `json:"log"`
	Path              *TreeEntry      `json:"path,omitempty"`
	Revparse_single   *Commit         `json:"revparse_single,omitempty"`
}

type RepositoryCursor struct {
	Results []Repository `json:"results"`
	Cursor  *Cursor      `json:"cursor,omitempty"`
}

type Signature struct {
	Name  string    `json:"name"`
	Email string    `json:"email"`
	Time  time.Time `json:"time"`
}

type Tag struct {
	Type    ObjectType `json:"type"`
	Id      string     `json:"id"`
	ShortId string     `json:"shortId"`
	Raw     string     `json:"raw"`
	Target  Object     `json:"target"`
	Name    string     `json:"name"`
	Tagger  Signature  `json:"tagger"`
	Message *string    `json:"message,omitempty"`
}

type TextBlob struct {
	Type    ObjectType `json:"type"`
	Id      string     `json:"id"`
	ShortId string     `json:"shortId"`
	Raw     string     `json:"raw"`
	Text    string     `json:"text"`
}

type Tree struct {
	Type    ObjectType      `json:"type"`
	Id      string          `json:"id"`
	ShortId string          `json:"shortId"`
	Raw     string          `json:"raw"`
	Entries TreeEntryCursor `json:"entries"`
	Entry   *TreeEntry      `json:"entry,omitempty"`
}

type TreeEntry struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Object Object `json:"object"`
	Mode   int32  `json:"mode"`
}

type TreeEntryCursor struct {
	Results []TreeEntry `json:"results"`
	Cursor  *Cursor     `json:"cursor,omitempty"`
}

type User struct {
	Id            int32            `json:"id"`
	Created       time.Time        `json:"created"`
	Updated       time.Time        `json:"updated"`
	CanonicalName string           `json:"canonicalName"`
	Username      string           `json:"username"`
	Email         string           `json:"email"`
	Url           *string          `json:"url,omitempty"`
	Location      *string          `json:"location,omitempty"`
	Bio           *string          `json:"bio,omitempty"`
	Repositories  RepositoryCursor `json:"repositories"`
}

type Version struct {
	Major           int32     `json:"major"`
	Minor           int32     `json:"minor"`
	Patch           int32     `json:"patch"`
	DeprecationDate time.Time `json:"deprecationDate,omitempty"`
	Features        Features  `json:"features"`
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

func RepositoryByName(client *gqlclient.Client, ctx context.Context, name string) (repositoryByName *Repository, err error) {
	op := gqlclient.NewOperation("query repositoryByName ($name: String!) {\n\trepositoryByName(name: $name) {\n\t\tid\n\t}\n}\n")
	op.Var("name", name)
	var respData struct {
		RepositoryByName *Repository
	}
	err = client.Execute(ctx, op, &respData)
	return respData.RepositoryByName, err
}

func ListArtifacts(client *gqlclient.Client, ctx context.Context, name string) (repositoryByName *Repository, err error) {
	op := gqlclient.NewOperation("query listArtifacts ($name: String!) {\n\trepositoryByName(name: $name) {\n\t\treferences {\n\t\t\tresults {\n\t\t\t\tname\n\t\t\t\ttarget\n\t\t\t\tartifacts {\n\t\t\t\t\tresults {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tfilename\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n")
	op.Var("name", name)
	var respData struct {
		RepositoryByName *Repository
	}
	err = client.Execute(ctx, op, &respData)
	return respData.RepositoryByName, err
}

func UploadArtifact(client *gqlclient.Client, ctx context.Context, repoId int32, revspec string, file gqlclient.Upload) (uploadArtifact Artifact, err error) {
	op := gqlclient.NewOperation("mutation uploadArtifact ($repoId: Int!, $revspec: String!, $file: Upload!) {\n\tuploadArtifact(repoId: $repoId, revspec: $revspec, file: $file) {\n\t\tfilename\n\t}\n}\n")
	op.Var("repoId", repoId)
	op.Var("revspec", revspec)
	op.Var("file", file)
	var respData struct {
		UploadArtifact Artifact
	}
	err = client.Execute(ctx, op, &respData)
	return respData.UploadArtifact, err
}

func DeleteArtifact(client *gqlclient.Client, ctx context.Context, id int32) (deleteArtifact *Artifact, err error) {
	op := gqlclient.NewOperation("mutation deleteArtifact ($id: Int!) {\n\tdeleteArtifact(id: $id) {\n\t\tfilename\n\t}\n}\n")
	op.Var("id", id)
	var respData struct {
		DeleteArtifact *Artifact
	}
	err = client.Execute(ctx, op, &respData)
	return respData.DeleteArtifact, err
}
