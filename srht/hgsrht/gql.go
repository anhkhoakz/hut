// Code generated by gqlclientgen - DO NOT EDIT

package hgsrht

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
	"time"
)

type ACL struct {
	Id         int32       `json:"id"`
	Created    time.Time   `json:"created"`
	Repository *Repository `json:"repository"`
	Entity     *Entity     `json:"entity"`
	Mode       *AccessMode `json:"mode,omitempty"`
}

type ACLCursor struct {
	Results []*ACL  `json:"results"`
	Cursor  *Cursor `json:"cursor,omitempty"`
}

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

type AccessMode string

const (
	AccessModeRo AccessMode = "RO"
	AccessModeRw AccessMode = "RW"
)

type AccessScope string

const (
	AccessScopeProfile      AccessScope = "PROFILE"
	AccessScopeRepositories AccessScope = "REPOSITORIES"
	AccessScopeRevisions    AccessScope = "REVISIONS"
	AccessScopeAcls         AccessScope = "ACLS"
)

type Cursor string

type Entity struct {
	Id            int32             `json:"id"`
	Created       time.Time         `json:"created"`
	Updated       time.Time         `json:"updated"`
	CanonicalName string            `json:"canonicalName"`
	Repositories  *RepositoryCursor `json:"repositories"`
}

type Features struct {
	Artifacts bool `json:"artifacts"`
}

type NamedRevision struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

type NamedRevisionCursor struct {
	Results []*NamedRevision `json:"results"`
	Cursor  *Cursor          `json:"cursor,omitempty"`
}

type RepoInput struct {
	Name        *string     `json:"name,omitempty"`
	Description *string     `json:"description,omitempty"`
	Visibility  *Visibility `json:"visibility,omitempty"`
	Readme      *string     `json:"readme,omitempty"`
}

type Repository struct {
	Id                int32                `json:"id"`
	Created           time.Time            `json:"created"`
	Updated           time.Time            `json:"updated"`
	Owner             *Entity              `json:"owner"`
	Name              string               `json:"name"`
	Description       *string              `json:"description,omitempty"`
	Visibility        Visibility           `json:"visibility"`
	Readme            *string              `json:"readme,omitempty"`
	UpstreamUrl       *string              `json:"upstreamUrl,omitempty"`
	AccessControlList *ACLCursor           `json:"accessControlList"`
	Tip               *Revision            `json:"tip,omitempty"`
	Heads             *RevisionCursor      `json:"heads"`
	Log               *RevisionCursor      `json:"log"`
	Bookmarks         *NamedRevisionCursor `json:"bookmarks"`
	Branches          *NamedRevisionCursor `json:"branches"`
	Tags              *NamedRevisionCursor `json:"tags"`
}

type RepositoryCursor struct {
	Results []*Repository `json:"results"`
	Cursor  *Cursor       `json:"cursor,omitempty"`
}

type Revision struct {
	Id          string    `json:"id"`
	Branch      string    `json:"branch"`
	Tags        []*string `json:"tags"`
	Author      string    `json:"author"`
	Description string    `json:"description"`
}

type RevisionCursor struct {
	Results []*Revision `json:"results"`
	Cursor  *Cursor     `json:"cursor,omitempty"`
}

type Tag struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

type User struct {
	Id            int32             `json:"id"`
	Created       time.Time         `json:"created"`
	Updated       time.Time         `json:"updated"`
	CanonicalName string            `json:"canonicalName"`
	Username      string            `json:"username"`
	Email         string            `json:"email"`
	Url           *string           `json:"url,omitempty"`
	Location      *string           `json:"location,omitempty"`
	Bio           *string           `json:"bio,omitempty"`
	Repositories  *RepositoryCursor `json:"repositories"`
}

type Version struct {
	Major           int32     `json:"major"`
	Minor           int32     `json:"minor"`
	Patch           int32     `json:"patch"`
	DeprecationDate time.Time `json:"deprecationDate,omitempty"`
	Features        *Features `json:"features"`
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

func Repositories(client *gqlclient.Client, ctx context.Context) (repositories *RepositoryCursor, err error) {
	op := gqlclient.NewOperation("query repositories {\n\trepositories {\n\t\t... repos\n\t}\n}\nfragment repos on RepositoryCursor {\n\tresults {\n\t\tname\n\t\tdescription\n\t\tvisibility\n\t}\n}\n")
	var respData struct {
		Repositories *RepositoryCursor
	}
	err = client.Execute(ctx, op, &respData)
	return respData.Repositories, err
}

func RepositoriesByUser(client *gqlclient.Client, ctx context.Context, username string) (user *User, err error) {
	op := gqlclient.NewOperation("query repositoriesByUser ($username: String!) {\n\tuser(username: $username) {\n\t\trepositories {\n\t\t\t... repos\n\t\t}\n\t}\n}\nfragment repos on RepositoryCursor {\n\tresults {\n\t\tname\n\t\tdescription\n\t\tvisibility\n\t}\n}\n")
	op.Var("username", username)
	var respData struct {
		User *User
	}
	err = client.Execute(ctx, op, &respData)
	return respData.User, err
}
